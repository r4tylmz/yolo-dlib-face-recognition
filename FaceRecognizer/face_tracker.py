import cv2
import imutils
from collections import OrderedDict
from Constants import constants
from Helpers.helpers import Helpers

cams = OrderedDict({(i,cv2.VideoCapture(i)) for i in range(0,2)})
frames = OrderedDict()
grabbed = OrderedDict()
helpers = None

init = False

while True:
    # check all video capture device is it opened or not
    for i, c in cams.items():
        if c is not None and c.isOpened():
            grabbed[i], frames[i] = c.read()

    # initialize the cams that are using and delete the non-using ones
    if len(constants.cams_in_use) == 0:
        constants.cams_in_use = [i for i,_ in frames.items() if grabbed[i] is True]
        to_be_deleted = []
        for i in cams.keys():
            if i not in constants.cams_in_use:
                to_be_deleted.append(i)
        for i in to_be_deleted: del cams[i]

    # pre-process for the grabbed frames
    for i in constants.cams_in_use:
        if grabbed[i]:
            frames[i] = imutils.resize(frames[i], width=640)
            frames[i] = cv2.flip(frames[i], 1)
            if helpers is None:
                h, w, _ = frames[i].shape
                helpers = Helpers(width=w, height=h)
    if not init:
        # initialize ordered dicts in the constants module
        constants.initialize()
        # initialize the centroid tracker
        constants.ct.initialize()
        init = True
    # register the recognized staffs and show their bounding boxes
    helpers.show_recognized_faces(frames)
    # show on the screen yolo bounding boxes that are generated by the pre-trained yolo head model
    helpers.show_yolo_bboxes(frames)
    # track staffs by using detected faces and detected heads centroids
    helpers.track()
    # draw the screen borders in white color, put room id and time variables as a text on the screen
    helpers.draw_to_screen()

    # show all cams streams that we use in one screen
    cv2.imshow('Image', helpers.get_concatenated_frames())

    constants.clear_ordered_dicts()
    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

# release all cams
helpers.release_cams(cams.values())
cv2.destroyAllWindows()
